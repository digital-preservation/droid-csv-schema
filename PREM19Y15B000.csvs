version 1.0
@totalColumns 32
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|This schema is for the validation of technical acquisition metadata csv files produced for PREM 19 files digitised for press events                                        |
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
batch_code: regex("^PREM19Y15[SB][0-9]{3}$")						//Batch_code must be of form PREM19Y15B000 or PREM19Y15S000 - 000 changes each batch, S indicates a sample
department: is("PREM") and (in($file_path) and in($resource_uri))	//Parentheses control evaluation order of booleans as might be expected
//												  The first set of grouped "is" statements simply defines expected values
//												  The grouped "in" statements say that the value found in this field must also
//												  be found as part of the fields "file_path" and "resource_uri"
division: is("1")										//this field must be the integer 1
series: positiveInteger is("19") and (in($file_path) and in($resource_uri))			//in general we expect this field will be a positive (non-zero) integer
//												  in this case it must have the specific value 1
//												  the value must also be part of the fields "file_path" and "resource_uri"
sub_series: empty										//this field must be blank
sub_sub_series: empty										//this field must be blank
piece: positiveInteger and (in($file_path) and in($resource_uri))					//the value must also be part of the fields "file_path" and "resource_uri"
item: positiveInteger @optional						//not every piece has been itemised, normally expect it to be integer value if it is present though
ordinal: positiveInteger							//if we know max number of images in a piece/item could set a range here
description: notEmpty
covering_date: regex("^19(79|80|81|82|83|84|85|86)( (Jan|Feb|Mar|Apr|May|June|July|Aug|Sept|Oct|Nov|Dec)( ([1-3][0-9]|[1-9]))?)?(-19(79|80|81|82|83|84|85|86)( (Jan|Feb|Mar|Apr|May|June|July|Aug|Sept|Oct|Nov|Dec)( ([1-3][0-9]|[1-9]))?)?)?$") 
legal_status: is("Public Record")
held_by: is("The National Archives, Kew")
file_uuid: uuid4 unique in($resource_uri)										//must be a version 4 uuid, and the value must be unique within the file
//												  uuids must be lower case.
file_path: fileExists uri starts("file:///PREM_19/content/")							//fileExists checks that there is actually a file of the given name at the 
//												  specified location on the file system.  In practice, the validator will
//												  normally be run with the --path switch which allows substitution of strings
//												  within file paths to allow for the fact that drive letters or mount points
//												  may vary between systems. eg the file_path specified in the file might begin
//												  file:///D:/WO/1/1 but we have the external drive on E: instead, so would run
//												  validate --path "file:///D:/WO/1/1" "file:///E:/WO/1/1" filename.csv schema
//												  or for unix systems drop drive letter altogether and give the mount point.
//												  We also require that the path is a valid uri, and begins file:///
//												  (Conditions specified on earlier columns say that the values of those columns
//												  must also appear as part of the content of this field)
file_checksum: checksum(file($file_path),"SHA-256")						//Compare the value given in this field to the checksum calculated for the file
//												  found at the location given in the "file_path" field (again path substitution
//												  may well be applied as described for the "file_path" field itself).
//												  Use the specified checksum algorithm.
//												  (must use lowercase hex characters)
resource_uri: uri starts("http://datagov.nationalarchives.gov.uk/66/PREM/19/")				//Must be a valid uri which starts with the specified string
//												  (Conditions specified on earlier columns say that the values of those columns
//												  must also appear as part of the content of this field)
scan_operator: length(1,12) regex("^[0-9a-zA-Z]{1,12}$")					//Similar to conditions to "batch_code" but only 12 alphanumeric characters
scan_id: length(1,12) regex("^[0-9a-zA-Z]{1,12}$")						//Same rule as "scan_operator"
scan_location: regex("[-\w\s,]+")								//Spec did not define a maximum length for this field so the regex allows any
//												  number of characters, allows general word and whitespace characters plus
//												  hyphen and comma
image_resolution: positiveInteger is("300")							//Generally must be a positive (non-zero) integer, and in this case explictly
//												  300
image_width: positiveInteger									//Must be a positive (non-zero) integer.  If the size of the material being
//												  digitised is well understood could use a range check to ensure values are
//												  within a "sensible" range eg range(2400,2600) for A4 material - just over
//												  8" wide (portrait), and assuming 300 ppi
image_height: positiveInteger									//Must be a positive (non-zero) integer.  If the size of the material being
//												  digitised is well understood could use a range check to ensure values are
//												  within a "sensible" range eg range(2400,2600) for A4 material - just over
//												  11.5" high (portrait), and assuming 300 ppi
image_tonal_resolution: is("24-bit colour")							//must be string: 24-bit colour (precisely - case as shown)
image_format: is("x-fmt/392")									//must be string: x-fmt/392 (precisely) - ie a jp2 file as understood by PRONOM
image_compression: positiveInteger is("6") or is("12")						//Generally a positive (non-zero) integer, specifically 6 or 12 (should just
//												  have been 6, but suggested imageMagick params appear to give 12-fold
//												  compression in fact, so allowed that too
image_colour_space: is("sRGB")									//must be string: sRGB (precisely - case as shown)
image_split: is("yes") or is("no")								//must be string: yes; or string: no (precisely - case as shown)
image_split_other_uuid: if($image_split/is("yes"),uuid4,is(""))					//if "image_split" field is yes, must be a uuid4, else must be blank
//												  (in certain circumstances it would be possible that this could be a list of
//												  uuids, in which case the conditions would have to be reworked)
image_crop: is("auto") or is("manual") or is("none")						//must be string: auto; or string: manual or string: none
//												  (precisely - case as shown)
image_deskew: is("yes") or is("no")								//must be string: yes; or string: no (precisely - case as shown)
comments: regex("[\w\s,.]+") @optional								//This field is optional, but if used the regex restricts to standard word
//												  characters, whitespace plus comma and fullstop.  No length limit.