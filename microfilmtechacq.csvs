version 1.0	
@totalColumns 41										
//each line of the csv file being tested must contain 38 columns (fields)
/****************************************************************************************************************************************************************************
*This schema is for the validation of technical acquisition metadata csv files according to the specification given for Lot 2 of the Scanning and Transcription Framework   *
*Invitation To Tender document, Appendix D, in particular implementing the restrictions and consistency checks given on pages 256-262.                                      *
*This schema was used to validate test results supplied by potential suppliers                                                                                              *
****************************************************************************************************************************************************************************/
batch_code: length(1,16) regex("^[0-9a-zA-Z]{1,16}$")						//1st condition, must be between 1 and 16 characters long,
//												  and (implicitly multiple conditions are joined by a logical AND
//												  unless another boolean is provided)
//												  2nd condition restricts to alphanumeric characters as specified in ITT p256
department: (is("DT") or is("DR") or is("BT") or is("DSIR")) and (in($file_path) and in($resource_uri))	//Parentheses control evaluation order of booleans as might be expected
//												  The first set of grouped "is" statements simply defines expected values
//												  The grouped "in" statements say that the value found in this field must also
//												  be found as part of the fields "file_path" and "resource_uri"
division: is("")										//this field must be blank 
series: positiveInteger (if($department/is("DT"),is("12"),if($department/is("DR"),is("16"),if($department/is("BT"),is("31"),if($department/is("DSIR"),is("43")))))) and (in($file_path) and in($resource_uri))			//in general we expect this field will be a positive (non-zero) integer
//												  the value must also be part of the fields "file_path" and "resource_uri"
sub_series: is("")										//this field must be blank
piece: positiveInteger (range(1,75) or range(46945,47372) or range(9,163) or range(1,170)) and (in($file_path) and in($resource_uri))					//in this case it must have the specific value 1
//												  the value must also be part of the fields "file_path" and "resource_uri"
ordinal: positiveInteger						//this field must be blank
file_uuid: uuid4 unique										//must be a version 4 uuid, and the value must be unique within the file
//												  uuids must be lower case.
file_path: fileExists uri starts("file:///")							//fileExists checks that there is actually a file of the given name at the 
//												  specified location on the file system.  In practice, the validator will
//												  normally be run with the --path switch which allows substitution of strings
//												  within file paths to allow for the fact that drive letters or mount points
//												  may vary between systems. eg the file_path specified in the file might begin
//												  file:///D:/WO/1/1 but we have the external drive on E: instead, so would run
//												  validate --path "file:///D:/WO/1/1" "file:///E:/WO/1/1" filename.csv schema
//												  or for unix systems drop drive letter altogether and give the mount point.
//												  We also require that the path is a valid uri, and begins file:///
//												  (Conditions specified on earlier columns say that the values of those columns
//												  must also appear as part of the content of this field)
file_checksum: checksum(file($file_path),"SHA-256")						//Compare the value given in this field to the checksum calculated for the file
//												  found at the location given in the "file_path" field (again path substitution
//												  may well be applied as described for the "file_path" field itself).
//												  Use the specified checksum algorithm.
//												  (must use lowercase hex characters)
resource_uri: uri starts("http://datagov.nationalarchives.gov.uk/66/")				//Must be a valid uri which starts with the specified string
//												  (Conditions specified on earlier columns say that the values of those columns
//												  must also appear as part of the content of this field)
scan_operator: length(1,12) regex("^[0-9a-zA-Z]{1,12}$")					//Similar to conditions to "batch_code" but only 12 alphanumeric characters
scan_id: length(1,12) regex("^[0-9a-zA-Z]{1,12}$")						//Same rule as "scan_operator"
scan_location: regex("[-\w\s,]+")								//Spec did not define a maximum length for this field so the regex allows any
//												  number of characters, allows general word and whitespace characters plus
//												  hyphen and comma
scan_native_format: regex("[0-9\w\s,.:]+")							//No length restriction was given for this field, nor any real restrictions on
//												  characters to be used, so the regex allows all numerals, word characters,
//												  whitespace, comma, fullstop and colon.  This was adjusted during the test
//												  validation to ensure all reasonable characters were passed
scan_timestamp: xDateTime									//timestamp for the scanning operation, compliant with XSD DateTime data type
image_resolution: positiveInteger range(1,10000)						//Generally must be a positive (non-zero) integer, and in this case maximum
//												  10000 (microfilm resoultion will be higher generally)
image_width: positiveInteger									//Must be a positive (non-zero) integer.  If the size of the material being
//												  digitised is well understood could use a range check to ensure values are
//												  within a "sensible" range eg range(2400,2600) for A4 material - just over
//												  8" wide (portrait), and assuming 300 ppi
image_height: positiveInteger									//Must be a positive (non-zero) integer.  If the size of the material being
//												  digitised is well understood could use a range check to ensure values are
//												  within a "sensible" range eg range(2400,2600) for A4 material - just over
//												  11.5" high (portrait), and assuming 300 ppi
image_tonal_resolution: is("Grayscale")								//must be string: Grayscale (precisely - case as shown)
image_format: is("x-fmt/392")									//must be string: x-fmt/392 (precisely) - ie a jp2 file as understood by PRONOM
image_colour_space: is("sGray")									//must be string: sGray (precisely - case as shown)
process_location: regex("[-\w\s,]+")								//See "scan_location"
jp2_creation_timestamp: xDateTime								//timestamp for the conversion to jp2, compliant with XSD DateTime data type
uuid_timestamp: xDateTime									//timestamp for creation of uuid, compliant with XSD DateTime data type
embed_timestamp: xDateTime									//timestamp for embedding xml in jp2, compliant with XSD DateTime data type
image_split: is("yes") or is("no")								//must be string: yes; or string: no (precisely - case as shown)
image_split_other_uuid: if($image_split/is("yes"),uuid4,is(""))					//if "image_split" field is yes, must be a uuid4, else must be blank
//												  (in certain circumstances it would be possible that this could be a list of
//												  uuids, in which case the conditions would have to be reworked)
image_split_operator: if($image_split/is("yes"),length(1,12) and regex("^[0-9a-zA-Z]{1,12}$"),is(""))	//If "image_split" field is string:yes (precisely)
//													  then must obey same format rule as "scan_operator" (12 alphanumeric)
//													  else must be blank
image_split_timestamp: if($image_split/is("yes"),xDateTime,is(""))					//If "image_split" field is string:yes (precisely)
//													  then timestamp for image split, compliant with XSD DateTime data type
//													  else must be blank
image_crop: is("auto") or is("manual") or is("")							//must be string: auto; or string: manual or string: none
//													  (precisely - case as shown)
image_crop_operator: if($image_crop/is("manual"),length(1,12) and regex("^[0-9a-zA-Z]{1,12}$"),is(""))	//If "image_crop" field is string:yes (precisely)
//													  then must obey same format rule as "scan_operator" (12 alphanumeric)
//													  else must be blank
image_crop_timestamp: if($image_crop/is("none"),is(""),xDateTime)					//If "image_crop" field is string: none (precisely)
//													  then must be blank
//													  else timestamp for image split, compliant with XSD DateTime data type
image_deskew: is("yes") or is("no")									//must be string: yes; or string: no (precisely - case as shown)
image_deskew_operator: if($image_deskew/is("yes"),length(1,12) and regex("^[0-9a-zA-Z]{1,12}$"),is(""))	//If "image_deskew" field is string:yes (precisely)
//													  then must obey same format rule as "scan_operator" (12 alphanumeric)
//													  else must be blank
image_deskew_timestamp: if($image_deskew/is("yes"),xDateTime,is(""))					//If "image_deskew" field is string: none (precisely)
//													  then must be blank
//													  else timestamp for image split, compliant with XSD DateTime data type
image_inversion: is("auto") or is("manual") or is("none")							//must be string: auto; or string: manual or string: none
//													  (precisely - case as shown)
image_inversion_operator: if($image_inversion/is("manual"),length(1,12) and regex("^[0-9a-zA-Z]{1,12}$"),is(""))	//If "image_inversion" field is string:none (precisely)
//													  then must obey same format rule as "scan_operator" (12 alphanumeric)
//													  else must be blank
image_inversion_timestamp: if($image_inversion/is("none"),is(""),xDateTime)				//If "image_inversion" field is string: none (precisely)
//													  then must be blank
//													  else timestamp for image split, compliant with XSD DateTime data type
QA_code: range(40,44)		@optional					//Specified integer values representing the following issues:
//													  40: microform scratchedImage skewed
//													  41:  illegible:   image too dark
//													  42:  illegible:  image too light
//													  43:  Microform breakage
//													  44:  No foliation
comments: regex("[\w\s,.]+") @optional								//This field is optional, but if used the regex restricts to standard word
//												  characters, whitespace plus comma and fullstop.  No length limit.
