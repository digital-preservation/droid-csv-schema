version 1.0
@totalColumns 44
//Schema updates: brackets, hyphen in street name, extend house number to allow eg 112-111, question marks in house number
//for continuations - by definition schedule/subsched should already have appeared.
/*Updates following meeting 24/7. Allow for non-numeric schedule refs where duplicates are distinguished in original by addition of a-f or A-F as a suffix, 
or where we have had to distinguish duplicates ourselves which will add suffix of form DUPnn (if the value is an integer the previous range will still be checked.)
Allow additional punctuation in street_name - instructions should already be OK as the length check should allow any string characters */
/*For general understanding of the data, a piece is an individual booklet of registration data (these were usually bound into a volume after the register was completed), compiled by an 
enumerator from the household returns for a specific area. An item is an individual page from the registers, this may be a cover page (ITEM_TITLEPAGE) which contains various summary 
information about the area covered, or a register page (ITEM_MAINPAGE or ITEM_CONPAGE) which has header info relating to the place, then around 40 or so lines filled to some degree with 
individual rows of data about each person in a household (or a brief entry for vacant houses and similar) these are the various SUBITEM types*/
//In the pure transcription fields we allow the use of ? to represent a single unreadable character, ??? for a completely unreadable word, * for a field left blank that would be expected to be filled
batch_code: if($metadata_type/regex("(PIECE)|(ITEM_((TITLE)|(MAIN)|(CON))PAGE)"), length(10) regex("^RG101B([0-9]{4})$"), is(""))
//batch_code is not on sub_item rows, but is on all other row types, it comprises the string RG101 to identify the project, followed by B for batch, then a running number (starting from one, padded to 4 digits with leading zeroes as required)
department: if($metadata_type/is("PIECE"), is("RG"), is(""))
//piece level rows have the department value RG, for all other rows this field should be blank
series: if($metadata_type/is("PIECE"), is("101"), is(""))
//piece level rows have the series value 101, for all other rows this field should be blank
piece: if($metadata_type/starts("ITEM_"),regex("^[0-9]{1,5}[A-Z]$") in($file_path),regex("^[0-9]{1,5}[A-Z]$"))
//All types of row have the piece value, which has between 1 and 5 numeric characters, followed by an upper case alphabetic value.  For item level rows, we also check that the piece value appears in the file_path field
item: if($metadata_type/not("PIECE"), range(1,500) unique($piece, $item,$sub_item), is(""))    @warning
//For item and sub_item rows (ie anything that's not a piece level row), item should have a numeric value in the range 1-500 (inclusive) and the combination of piece reference, item reference and sub_item reference should be unique.  For piece level rows this field should be blank
sub_item: if($metadata_type/starts("SUBITEM_"), range(1,44) unique($piece, $item,$sub_item), is("")) @warning
//For sub_item rows (ie the transcription of an individual row on a register page) this field should have a numeric value in the range 1-44 (inclusive), and we reiterate the requirement for the combination of piece reference, item reference and sub_item reference to be unique.  For piece and item rows, this field should be blank
metadata_type: is("PIECE") or is("ITEM") or is("ITEM_TITLEPAGE") or is("ITEM_MAINPAGE") or is("ITEM_CONPAGE") or is("SUBITEM_NAME") or is("SUBITEM_CONNAME") or is("SUBITEM_VACANT") or is("SUBITEM_BLANK") or is("SUBITEM_REMOVED") or is("SUBITEM_QADDRESS")
//This check prescribes the acceptable values for metadata_type (this value is then used by most of the rest of the checks to define acceptable values for that type of metadata row
file_path: if($metadata_type/starts("ITEM_"), uri and regex("^file:\/\/\/RG_101\/[0-9]{1,5}[A-Z]\/[0-9]{1,3}\/[0-9]{1,5}[A-Z]_[0-9]{1,3}_[0-9]{1,4}.+\.jp2$") and unique fileExists, is(""))
//For item rows we expect to have the JP2 image, this should be given in the form of a URI, which is of the form file:///RG_101/{piece}/{item}/{piece}_{item}_0001.jp2 (values in {} are those for the appropriate field of the same name), the file_path must also be unique
page_number: if($metadata_type/regex("(ITEM_MAINPAGE)|(ITEM_CONPAGE)"), regex("^([0-9a-zA-Z]{1,4})$") or is("missing"), is(""))
//For actual register pages with entries on them (as opposed to cover pages), we should a have a page_number, transcribed from the top right hand corner of the page (lost in redaction), 1-4 alphanumeric characters are allowed (as often additional pages were added in later and so on), or the value 2missing" if the page number was not present for some reason
volume_number: if($metadata_type/is("PIECE"), regex("^[A-Z]{4}\s\-\s[A-Z]{4}$") or regex("^[A-Z]{4}\s\-\s[A-Z]{3}$") or regex("^[A-Z]{2}\s\([A-Z]{2}\)$") or regex("^[0-9]{0,5}(\s){0,1}[A-Z]{2}(\s){0,1}\([A-Z]{2}(\s){0,1}\-(\s){0,1}[A-Z]{2,3}\)$") or regex("^[0-9]{0,5}(\s)?[A-Z]{2}\([A-Z]{2}\)(\s)?\-(\s)?[A-Z]{2}\([A-Z]{2}\)$"), is(""))
//Piece level rows should have a volume_number derived from the original label on the spine - in tech_acq name of this field seems to have changed to transcribed_volume_code ??) - keep an eye out for how this is given in the metadata files, may need to change name here too.
file_uuid: if($metadata_type/starts("ITEM_"), uuid4 and unique, is(""))
//For item level rows (which described the actual image file) we should have the file_uuid, a version 4 UUID
file_uuid_other: $metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)") uuid4 unique($piece, $item, $sub_item, $metadata_type) @optional
//This field should record the UUID of the image on which there is a continuation entry for an individual sub_item (ie individual row on a register page)
first_date_day: if($metadata_type/is("PIECE"), is("29"), is(""))
first_date_month: if($metadata_type/is("PIECE"), is("September"), is(""))
first_date_year: if($metadata_type/is("PIECE"), is("1939"), is(""))
last_date_day: if($metadata_type/is("PIECE"), is("29"), is(""))
last_date_month: if($metadata_type/is("PIECE"), is("September"), is(""))
last_date_year: if($metadata_type/is("PIECE"), is("1939"), is(""))
//The various date fields allow us to construct a covering date for this information - we are suing just the date on which the original register was compiled, and not making any attempt to capture when the data was subsequently updated when the register was in use
county: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_VACANT)|(SUBITEM_CONNAME)|(SUBITEM_REMOVED)|(SUBITEM_QADDRESS)|(PIECE)"), regex("^[a-zA-Z ]{3,}$"), is(""))
//County is data derived by DCTFH based on the enumeration district.  We are merely checking that there are at least 3 alphanumeric characters here, we are not attempting to introduce a controlled vocab
ED_letter_code: if($metadata_type/is("PIECE"), regex("^[A-Z]{4,5}$"), is(""))
//each enumeration district (ed) was assigned a four or five letter code
borough: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_VACANT)|(SUBITEM_CONNAME)|(SUBITEM_REMOVED)|(SUBITEM_QADDRESS)|(PIECE)"), regex("^[a-zA-Z \.]{3,}$"), is(""))
//The borough should be recorded at the start of each register booklet (PIECE), and for search purposes is then copied down into the SUBITEMs
registration_district: if($metadata_type/is("PIECE"), regex("^[0-9]{1,6}"), is(""))
//The name of the registration district is captured for each PIECE (and should otherwise be blank)
sub_district: if($metadata_type/is("PIECE"), regex("^[0-9]{1,6}"), is(""))
//Sub_district, a numeric value up to six digits long, is captured at piece level (only)
house_number: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_VACANT)|(SUBITEM_CONNAME)|(SUBITEM_REMOVED)|(SUBITEM_QADDRESS)"),  if(not(""), regex("^[0-9A-Za-z\-\(\)\?]{1,7}$"), $house_name/not("")), is(""))
//house_number should be blank except at sub-item level.  Where an address is populated, which is every type of sub_item except SUBITEM_BLANK which represents an entirely blank row, at least one of house_number and house_name must be populated.  House number is not strictly numeric, obviously things like 1A are not uncommon, and we've also found various instances of punctuation etc, so these are allowed
house_name: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_VACANT)|(SUBITEM_CONNAME)|(SUBITEM_REMOVED)|(SUBITEM_QADDRESS)"), if(not(""), length(2, *), $house_number/not("")), is(""))
//Like house_number, for sub_item rows other than SUBITEM_BLANK, at least one of house_number and house_name must be populated (having both is permitted).  The only real restriction on a name is that it must have at least two characters
street_name: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_VACANT)|(SUBITEM_CONNAME)|(SUBITEM_REMOVED)|(SUBITEM_QADDRESS)"), regex("^[0-9A-Za-z, \-\(\)\?'\.\\]{3,}$"), is("")) @optional
//Again for sub_items other than SUBITEM_BLANK this field must have at least three characters of any sort (though in fact it's optional, as not everywhere has named streets, so only a field with only 1 or 2 characters would actually produce an error!)
schedule_no: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_VACANT)|(SUBITEM_CONNAME)|(SUBITEM_REMOVED)|(SUBITEM_QADDRESS)"), if(positiveInteger,range(1,619),regex("^[1-9][0-9]{0,2}(([a-fA-F])|(DUP[0-9]{1,2}))$")),is("")) 
//Within each enumeration district the enumerator numbered the schedules issued to each individual household beginning at 1.  Occasionally duplicate schedule numbers were accidentally created, these were corrected at the time by adding an alphabetic suffix, or some have only just been found where we distinguish by adding DUPnn (where nn is a numeric with 1 or 2 digits)
sub_schedule_no: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_QADDRESS)"), range(1,613) and unique($piece,$schedule_no,$sub_schedule_no), if($metadata_type/is("SUBITEM_CONNAME"),range(1,613),is("")))
//Within each individual household, each individual person was given a sub_schedule_no - this only applied to SUBITEM types where individuals actually lived there, so if the property was vacant etc, this field will be blank.  Normally we expect that the combination of piece, schedule_no and sub_schedule_no should be unique, but if it's a continuation sub_item then by definition that combination exists elsewhere
surname: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or is("???") or length(1,*), is(""))
//Here we just check that something is filled in for surname for relevant SUBITEM types - see separate schema for some more detailed checking 
surname_other: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or is("???") or length(1,*), is("")) @optional
//Here if a surname has been amended at some point this field should be populated
forenames: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or is("???") or length(1,*), is(""))
//Here we just check that something is filled in for forenames for relevant SUBITEM types - see separate schema for some more detailed checking 
forenames_other: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or is("???") or length(1,*), is("")) @optional
//Here if forenames have been amended at some point this field should be populated
OVSPI: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("Officer") or is("Visitor") or is("Servant") or is("Patient") or is("Inmate") or is("?") or is("*"), is(""))
//Records the data recorded in one of the original form columns, expanded from the single character originally used according to the detailed instructions to enumerators, again only required for appropriate surname types
gender: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("male") or is("female") or is("*"))
birth_date_day: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), regex("^\*|([0\?][1-9\?])|([1-2\?][0-9\?])|([3\?][0-1\?])$"), is("")) //validator will fail if you open csv template as expecting single digit days to have a leading 0 and Excel removes it
birth_date_month: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or is("?") or is("January") or is("February") or is("March") or is("April") or is("May") or is("June") or is("July") or is("August") or is("September") or is("October") or is("November") or is("December"), is(""))
birth_date_year: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), regex("^1[7-9][0-9\?]{2}|\*$"), is(""))
//dates are broken down into 3 separate fields for ease of parsing
marital_status: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or is("?") or is("single") or is("married") or is("widowed") or is("divorced"), is(""))
//Like OVSPI, expanded from the single character used in the original register to the full word the character represents
occupation: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or length(3,*), is(""))
//a fairly freeform field as no sort of controlled vocab was used in the register
refers_to: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("continuation") or regex("^([0-9a-zA-Z]{1,4})$") , is("")) @optional 
//range(1,200) replaced by the regex to allow refs to pages in other registers, this field also records membership of Home Guard, Auxiliary Fire Service, ARP etc - added by AG 8th Oct 2015
//code for instructions: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("*") or length(3,*) or is("continuation") or regex("^([0-9a-zA-Z]{1,4})$") , is("")) @optional
//range(1,200) replaced by the regex to allow refs to pages in other registers, this field also records membership of Home Guard, Auxiliary Fire Service, ARP etc
sensitive_annotation: if($metadata_type/regex("(SUBITEM_NAME)|(SUBITEM_CONNAME)|(SUBITEM_QADDRESS)"), is("Adopted"), is("")) @optional
//It was believed that there was potential for some records to show that a person had been adopted, if this does happen, it should be recorded in this field and the relevant line redacted in perpetuity
legal_status: is("Public Record")
//Fixed value
held_by: is("The National Archives, Kew")
//fixed value
comments:
//Free entry field to record anything else of use or note