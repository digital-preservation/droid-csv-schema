version 1.1
@totalColumns 24
batch_code: regex("ADM171B[0-9]{1,3}")
department: is("ADM")
division: is("25")
series: is("171")
piece: range(183,187) or is("203")
item: switch(($piece/starts("183"),range(1,339)),($piece/starts("184"),range(1,340)),($piece/is("185"),range(1,338)),($piece/is("186"),range(1,518)),($piece/is("187"),range(1,9999)),($piece/is("203"),range(1,9999)))
//Check item ranges again for 187 and 203
sub_item: positiveInteger @optional
covering_date: regex("^\[?19[1-7][0-9]( (Jan|Feb|Mar|Apr|May|June|July|Aug|Sept|Oct|Nov|Dec)( ([1-3][0-9]|[1-9]))?)\]??(-\[?19[1-7][0-9]( (Jan|Feb|Mar|Apr|May|June|July|Aug|Sept|Oct|Nov|Dec)( ([1-3][0-9]|[1-9]))?)?\]?)?$") or is("[Jan 1952-Dec 1995]")
description: any("Contains no personal data","Royal Naval Auxiliary Service Medal") or regex("^Badge numbers ([1-9][0-9]{0,4}\-[1-9][0-9]{0,4}.*|various reissues)$")
file_path: uri starts(concat("file:///",$department,"_",$series,"/content/",$piece,"/",$item,"/",$piece,"_",$item,"_")) regex(".*(000[1-9]|00[1-9][0-9]).jp2$") //integrityCheck("",empty,"excludeFolder") // fileExists 
file_uuid: uuid4 unique($piece,$item,$sub_item,$file_uuid)
legal_status: is("Public Record")
held_by: is("The National Archives, Kew")
official_number: if($description/any("Contains no personal data","Royal Naval Auxiliary Service Medal"),empty,regex("^.*[1-9][0-9]{0,5}.*$")) @optional
official_number_other: if($description/any("Contains no personal data","Royal Naval Auxiliary Service Medal"),empty,regex("^.*[1-9][0-9]{0,5}.*$")) @optional
surname: switch(($description/is("Contains no personal data"),empty),($comments/regex("^.*surname checked.*"),notEmpty),regex("^(((([dDL][\?aeiou]([- ]?))|([dDAL](e)?\')|([dD]e([- ]?)[lL]a([- ]?))|(St(e?[- ]?))|([Vv][\?ao]n( ?)([Dd]e[rn]?( ?))?))|(M[\?a]?[\?c]|M\'|O\'))?[\?A-Z][\?\p{Ll}]{2,15})(([- ])((([dDL][\?aeiou]([- ]?))|([dDAL](e)?\')|([dD]e([- ]?)[lL]a([- ]?))|(St(e?[- ]?))|([Vv][\?ao]n( ?)([Dd]e[rn]?( ?))?))|(M[\?a]?[\?c]|M\'|O\'))?[\?A-Z][\?\p{Ll}]{2,15})?$") or is("???")) @optional @warning
surname_other: switch(($description/is("Contains no personal data"),empty),($comments/regex("^.*surname_other checked.*"),notEmpty),regex("^(((([dDL][\?aeiou]([- ]?))|([dDAL](e)?\')|([dD]e([- ]?)[lL]a([- ]?))|(St(e?[- ]?))|([Vv][\?ao]n( ?)([Dd]e[rn]?( ?))?))|(M[\?a]?[\?c]|M\'|O\'))?[\?A-Z][\?\p{Ll}]{2,15})(([- ])((([dDL][\?aeiou]([- ]?))|([dDAL](e)?\')|([dD]e([- ]?)[lL]a([- ]?))|(St(e?[- ]?))|([Vv][\?ao]n( ?)([Dd]e[rn]?( ?))?))|(M[\?a]?[\?c]|M\'|O\'))?[\?A-Z][\?\p{Ll}]{2,15})?$") or is("???")) @optional @warning
//The regex used for both surname fields is identical, both are set as optional, so the check only applies if something is in the field, the other schema checks that the field is only filled when it should be
//The surname is divided into an optional prefix, eg Mc, Mac, De, De La, with varied capitalisation, with or without space or hyphen to separate it from the mandatory part of the name which must begin with a capital letter, and then be lowercase only, then we allow for a single additional "barrel" (with identical formatting rules), separated by a space or hyphen.  Names with more barrells are sufficiently uncommon that it's probably worth double checking that one aprt isn't actually a middle name, or an amendment that's not been properly captured
forename: switch(($description/is("Contains no personal data"),empty),($comments/regex("^.*forename checked.*"),notEmpty),regex("^[\?A-Z][\?\p{Ll}]{0,15}([- ](\(?((([dDL][\?aeiou]([- ]?))|([dDAL](e)?\')|([dD]e([- ]?)[lL]a([- ]?))|(St(e?[- ]?))|([Vv][\?ao]n( ?)([Dd]e[rn]?( ?))?))|(M[\?a]?[\?c]|M\'|O\'))?[\?A-Z][\?\p{Ll}]{0,15})\)?)*( \((((The )?Rev)|Sir|MA|BA|DD|BD|MB|Bart|VC|[GK]?CB|[GK]?CMG|[GK]?CVO|DSO|DSC|MC|DSM|DCM|[OM]BE|BEM|ADC|Mrs|Miss|Capt|Major|CDR|RM)( (((The )?Rev)|Sir|MA|BA|DD|BD|MB|Bart|VC|[GK]?CB|[GK]?CMG|[GK]?CVO|DSO|DSC|MC|DSM|DCM|[OM]BE|BEM|ADC|Mrs|Miss|Capt|Major|CDR|RM))*\))?$")) @optional @warning
forename_other: switch(($description/is("Contains no personal data"),empty),($comments/regex("^.*forename_other checked.*"),notEmpty),regex("^[\?A-Z][\?\p{Ll}]{0,15}([- ](\(?((([dDL][\?aeiou]([- ]?))|([dDAL](e)?\')|([dD]e([- ]?)[lL]a([- ]?))|(St(e?[- ]?))|([Vv][\?ao]n( ?)([Dd]e[rn]?( ?))?))|(M[\?a]?[\?c]|M\'|O\'))?[\?A-Z][\?\p{Ll}]{0,15})\)?)*( \((((The )?Rev)|Sir|MA|BA|DD|BD|MB|Bart|VC|[GK]?CB|[GK]?CVO|[GK]?CMG|DSO|DSC|MC|DSM|DCM|[OM]BE|BEM|ADC|Mrs|Miss|Capt|Major|CDR|RM)( (((The )?Rev)|Sir|MA|BA|DD|BD|MB|Bart|VC|[GK]?CB|[GK]?CMG|[GK]?CVO|DSO|DSC|MC|DSM|DCM|[OM]BE|BEM|ADC|Mrs|Miss|Capt|Major|CDR|RM))*\))?$")) @optional @warning
badge_number: if($description/any("Contains no personal data","Royal Naval Auxiliary Service Medal"),empty,if($piece/not("203"),positiveInteger or is("51082A"),empty))
date_of_issue_day: if($description/any("Contains no personal data","Royal Naval Auxiliary Service Medal"),empty,regex("^\*|([0\?][1-9\?])|([1-2\?][0-9\?])|([3\?][0-1\?])$"))
date_of_issue_month: if($description/any("Contains no personal data","Royal Naval Auxiliary Service Medal"),empty,any("*","?","January","February","March","April","May","June","July","August","September","October","November","December"))
date_of_issue_year: if($description/any("Contains no personal data","Royal Naval Auxiliary Service Medal"),empty,range(1916,1995) or is("*") or is("????") or regex("^19[5-9\?][0-9\?]$") and in($covering_date))
comments: regex("[-\w\s,\.\(\)\/'":\?]+") @optional

